using UnityEngine;
using Utility;

namespace NHSRemont.Utility
{
    /// <summary>
    /// Utility class for anything regarding textures
    /// </summary>
    public static class TextureUtils
    {
        /// <summary>
        /// Fixes brightness disparity between autogenerated mipmaps and the original texture
        /// </summary>
        public static void FixMipmapsBrightness(Texture2D tex)
        {
            float correctBrightness = GetAverageBrightness(tex);
            
            for (int i = 1; i < tex.mipmapCount; i++)
            {
                Color[] pixels = tex.GetPixels(i);
                float mipBrightness = GetAverageBrightness(pixels);
                BrightenPixels(pixels, correctBrightness/mipBrightness);
                tex.SetPixels(pixels, i);
            }
        }

        /// <summary>
        /// Sets the texture's mipmaps to clearly distinguishable colours for each level
        /// </summary>
        public static void SetMipsToDebugMode(Texture2D tex)
        {
            for (int i = 1; i < tex.mipmapCount; i++)
            {
                Color[] pixels = tex.GetPixels(i);
                float r = i % 3;
                float g = (i + 1) % 3;
                float b = (i + 2) % 3;
                RecolourPixels(pixels, new Color(r,g,b));
                tex.SetPixels(pixels, i);
            }
        }
        
        /// <summary>
        /// Gets the average brightness of a texture, accounting for alpha
        /// </summary>
        /// <param name="mipLevel">The mipmap level to sample from</param>
        // ReSharper disable once InvalidXmlDocComment
        public static float GetAverageBrightness(Texture2D tex, int mipLevel = 0)
        {
            return GetAverageBrightness(tex.GetPixels(mipLevel));
        }

        /// <summary>
        /// Gets the average brightness of all pixels, accounting for alpha
        /// </summary>
        public static float GetAverageBrightness(Color[] pixels)
        {
            float totalBrightness = 0f;
            float maxPossibleBrightness = 0f;
            for (int i = 0; i < pixels.Length; i++)
            {
                maxPossibleBrightness += pixels[i].a;
                totalBrightness += GetBrightnessFromColour(pixels[i])*pixels[i].a;
            }
            
            return totalBrightness / maxPossibleBrightness;
        }

        /// <summary>
        /// Brightens all pixels by some factor, preserving alpha
        /// </summary>
        public static void BrightenPixels(Color[] pixelsToModify, float factor)
        {
            for (int i = 0; i < pixelsToModify.Length; i++)
            {
                pixelsToModify[i] = BrightenColour(pixelsToModify[i], factor);
            }
        }

        /// <summary>
        /// Recolours all pixels to some colour, preserving alpha
        /// </summary>
        public static void RecolourPixels(Color[] pixelsToModify, Color newColour)
        {
            for (int i = 0; i < pixelsToModify.Length; i++)
            {
                Color colour = pixelsToModify[i];
                pixelsToModify[i] = new Color(newColour.r, newColour.g, newColour.b, colour.a);
            }
        }

        /// <summary>
        /// Gets the perceived brightness of a colour, ignoring alpha
        /// </summary>
        public static float GetBrightnessFromColour(Color colour)
        {
            return colour.r * 0.3f + colour.g * 0.59f + colour.b * 0.11f;
        }

        /// <summary>
        /// Brightens a colour by some factor, preserving alpha
        /// </summary>
        public static Color BrightenColour(Color colour, float factor)
        {
            Color adjusted = colour*factor;
            adjusted.a = colour.a;
            return adjusted;
        }

        /// <summary>
        /// Strips the sRGB and gAMA chunks from a file which usually result in wrong colours
        /// </summary>
        /// <param name="tex">The texture to strip these chunks from</param>
        public static void StripChunks_sRGB_gAMA(Texture2D tex)
        {
            Png png = new Png(tex.EncodeToPNG());
            png.RemoveChunk("gAMA");
            png.RemoveChunk("sRGB");
            tex.LoadImage(png.ToBytes());
        }
    }
}